plugins {
    id 'java-library'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
}

dependencies {

    compile 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0-M1'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.7.0-M1'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompile 'com.google.code.gson:gson:2.8.6'
    testCompile 'com.github.roookeee:datus:1.5.0'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testCompile 'org.mapstruct:mapstruct:1.3.1.Final'


}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_source_sets
sourceSets {
    jmh {
        java {
            srcDirs = ['src/jmh/java']
        }
        resources {
            srcDirs = ['src/jmh/resources']
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
    }
}

dependencies {
    jmhAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    jmhAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.23'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.23'
}

// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html
task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'com.github.er.mapper.SimpleExampleTest'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

// to make sure benchmarks always get compiled
classes.finalizedBy(jmhClasses)

group 'com.github.er.mapper'
version '0.0.1'
